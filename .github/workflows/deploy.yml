name: Deploy to AWS

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - development

jobs:
  set_environment:
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment based on branch
        id: environment_check
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          
          if [[ "$BRANCH_NAME" = "master" ]]; then
            ENVIRONMENT="production"
          else
            ENVIRONMENT=$BRANCH_NAME
          fi
          
          echo "environment=${ENVIRONMENT,,}" >> $GITHUB_OUTPUT
    outputs:
      environment: ${{ steps.environment_check.outputs.environment }}

  assets:
      runs-on: ubuntu-latest
      needs: [set_environment]
      environment:
        name: ${{ needs.set_environment.outputs.environment }}

      steps:
          - name: Checkout
            uses: actions/checkout@v4

          - name: Use Node.js 16
            uses: actions/setup-node@v3
            with:
                node-version: '16'

          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v4
            with:
              role-to-assume: ${{ secrets.DEVELOPMENT_GH_OIDC_ROLE_ARN }}
              aws-region: ${{ secrets.AWS_REGION }}

          - name: Install NPM Dependencies
            run: npm install

          - name: Build CSS
            run: npm run build:css

          - name: Build Front-end JS
            run: npm run build:ui

          - name: Sync Assets
            uses: jakejarvis/s3-sync-action@master
            with:
                args: --acl public-read
            env:
                AWS_S3_BUCKET: "${{ needs.set_environment.outputs.environment }}-graphacademy-assets"
                GH_OIDC_ROLE_ARN: ${{ secrets.DEVELOPMENT_GH_OIDC_ROLE_ARN }}
                AWS_REGION: ${{ secrets.AWS_REGION }}
                SOURCE_DIR: 'public'
                DEST_DIR: 'assets'

#    invalidate-cache:
#        runs-on: ubuntu-latest
#        needs: assets
#        steps:
#            - name: Invalidate CloudFront Cache
#              uses: chetan/invalidate-cloudfront-action@v2
#              env:
#                  DISTRIBUTION: ${{ secrets.GA_CLOUDFRONT_DISTRIBUTION }}
#                  PATHS: '/assets'
#                  AWS_REGION: ${{ secrets.AWS_REGION }}
#                  role-to-assume: ${{ secrets.DEVELOPMENT_GH_OIDC_ROLE_ARN }}

  deploy:
      runs-on: ubuntu-latest
      needs: invalidate-cache
      steps:
          - name: Checkout
            uses: actions/checkout@v4

          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v4
            with:
                role-to-assume: ${{ secrets.GH_OIDC_ROLE_ARN }}
                aws-region: ${{ secrets.AWS_REGION }}

          - name: Login to Amazon ECR Private
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v2
            with:
              aws-region: ${{ secrets.AWS_REGION }}

          - name: Create tag
            id: create_tag
            uses: anothrNick/github-tag-action@1.39.0
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              WITH_V: true
              FIRST_VERSION: '1.0.0'
              DEFAULT_BUMP: minor

          - name: Build and push
            uses: docker/build-push-action@v5
            env:
                GITHUB_OAUTH_TOKEN: ${{ secrets.AC_GITHUB_OAUTH_TOKEN }}
            with:
                context: .
                push: true
                tags: "${{steps.login-ecr.outputs.registry}}/${{needs.set_environment.outputs.environment}}-devrel-graphacademy-repository:${{steps.create_tag.outputs.tag}}"

          - name: Retrieve the latest task definition and update it
            id: register-task-def
            run: |
              IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ needs.set_environment.outputs.environment }}-devrel-graphacademy-repository:${{ steps.create_tag.outputs.tag }}"
              TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_NAME)
              NEW_TASK_DEF=$(echo "$TASK_DEF" | jq --arg IMAGE_URI "$IMAGE_URI" '.taskDefinition | .containerDefinitions[0].image = $IMAGE_URI')
              echo "$NEW_TASK_DEF" > new-task-def.json
              
              REGISTER_RESPONSE=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json)
              TASK_DEFINITION_ARN=$(echo "$REGISTER_RESPONSE" | jq -r '.taskDefinition.taskDefinitionArn')
              echo "task_definition_arn=$TASK_DEFINITION_ARN" >> $GITHUB_ENV
            env:
              TASK_NAME: ${{ needs.set_environment.outputs.environment }}-devrel-graphacademy-task
              AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

          - name: Deploy new task definition to ECS
            uses: aws-actions/amazon-ecs-deploy-task-definition@v1
            with:
              service: ${{ needs.set_environment.outputs.environment }}-devrel-graphacademy-service
              cluster: ${{ needs.set_environment.outputs.environment }}-devrel-graphacademy-cluster
              task-definition: ${{ env.task_definition_arn }}

  update-eventbridge:
    runs-on: ubuntu-latest
    needs: [set_environment, deploy]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GH_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install jq
          sudo pip install yq

      - name: Read YAML configurations, update Eventbridge Schedules and Targets
        run: |
          tasks=$(yq e '.crons' deployment-config/cron-config.yaml | yq e '[.[]]' -)
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ENV_NAME=${{ needs.set_environment.outputs.environment }}
  
          for task in "${tasks[@]}"
          do
            NAME=$(echo $task | yq e '.name' -)
            COMMAND=$(echo $task | yq e -j '.command')
            CRON=$(echo $task | yq e '.cron' -)
            TASK_NAME="${ENV_NAME}-${NAME}-task-cron"
            RULE_NAME="${ENV_NAME}-${NAME}-rule"
            ENV_VARS=$(echo $task | yq e '.env | map({(.name): .valueFrom.secretKeyRef.key}) | add' -)
  
            EVENTBRDIGE_ROLE="arn:aws:iam::${AWS_ACCOUNT_ID}:role/${ENV_NAME}-devrel-graphacademy-ecs-events-role"              
          
            DEF=$(aws ecs describe-task-definition --task-definition ${{ needs.set_environment.outputs.environment }}-devrel-graphacademy-task)
          
            NEW_DEF=$(echo $DEF | jq --argjson command "$COMMAND" ".taskDefinition | .containerDefinitions[0].image=env.TARGET_IMAGE | .containerDefinitions[0].command=$command | .containerDefinitions[0].environment=$ENV_VARS | .family=\"${TASK_NAME}\"")              
          
            response=$(aws ecs register-task-definition --cli-input-json "$NEW_DEF")
            revision=$(echo $response | jq -r '.taskDefinition.revision')
            target_id=$(echo $response | jq -r '.taskDefinition.taskDefinitionArn')
            target_arn=$(echo $response | jq -r '.taskDefinition.taskRoleArn')
          
            aws events put-rule --name $RULE_NAME --schedule-expression $CRON
            aws events put-targets --rule $RULE_NAME --targets 'Id='"$target_id"',Arn='"$target_arn"',EcsParameters={TaskDefinitionArn="arn:aws:ecs:'"${{ secrets.AWS_REGION }}"':'"${AWS_ACCOUNT_ID}"':task-definition/'"$TASK_NAME"':'"$revision"', RoleArn="'$EVENTBRDIGE_ROLE'"}'
          done
