name: Deploy to AWS ECS

on:
    push:
        tags:
            - 'v*' # Push events to matching v*, i.e. v1.0, v2.1.3
        branches:
          - development

jobs:
    set_environment:
        runs-on: ubuntu-latest
        steps:
            - name: Set up environment based on branch
              id: environment_check
              shell: bash
              run: |
                  BRANCH_NAME=${GITHUB_REF#refs/heads/}
                  BRANCH_NAME=${BRANCH_NAME#refs/tags/}

                  if [[ "$BRANCH_NAME" == v* ]]; then
                    ENVIRONMENT="production"
                  else
                    ENVIRONMENT="development"
                  fi

                  echo "environment=${ENVIRONMENT,,}" >> $GITHUB_OUTPUT
        outputs:
            environment: ${{ steps.environment_check.outputs.environment }}

#    assets:
#        runs-on: ubuntu-latest
#        needs: set_environment
#        permissions:
#            id-token: write
#            contents: read
#        env:
#            AWS_REGION: us-east-1
#            ENVIRONMENT: ${{ needs.set_environment.outputs.environment }}
#        steps:
#            - name: Checkout
#              uses: actions/checkout@v4
#
#            - name: Set env variables for secrets
#              run: |
#                  echo "N_AWS_DEPLOY_ROLE_ARN=${ENVIRONMENT}_GH_OIDC_ROLE_ARN" >> $GITHUB_ENV
#
#            - name: Use Node.js 20
#              uses: actions/setup-node@v4
#              with:
#                  node-version: '20'
#
#            - name: Configure AWS credentials
#              uses: aws-actions/configure-aws-credentials@v4
#              with:
#                  role-to-assume: ${{ vars[env.N_AWS_DEPLOY_ROLE_ARN] }}
#                  aws-region: ${{ vars.AWS_REGION }}
#
#            - name: Install NPM Dependencies
#              run: npm install
#
#            - name: Build CSS
#              run: npm run build:css

#    deploy:
#        runs-on: ubuntu-latest
#        needs: [set_environment, assets]
#        permissions:
#            id-token: write
#            contents: read
#        env:
#            AWS_REGION: us-east-1
#            ENVIRONMENT: ${{ needs.set_environment.outputs.environment }}
#        steps:
#            - name: Checkout
#              uses: actions/checkout@v4
#
#            - name: Set env variables for secrets
#              run: |
#                  echo "N_AWS_DEPLOY_ROLE_ARN=${ENVIRONMENT}_GH_OIDC_ROLE_ARN" >> $GITHUB_ENV
#
#            - name: Configure AWS credentials
#              uses: aws-actions/configure-aws-credentials@v4
#              with:
#                  role-to-assume: ${{ vars[env.N_AWS_DEPLOY_ROLE_ARN] }}
#                  aws-region: ${{ vars.AWS_REGION }}
#
#            - name: Login to Amazon ECR Private
#              id: login-ecr
#              uses: aws-actions/amazon-ecr-login@v2
#
#            - name: Build and push
#              uses: docker/build-push-action@v6
#              with:
#                  context: .
#                  push: true
#                  tags: '${{ env.IMAGE }}:${{ github.sha }},${{ env.IMAGE }}:latest'
#              env:
#                  IMAGE: '${{ steps.login-ecr.outputs.registry }}/${{ env.ENVIRONMENT }}-graphacademy-repository'
#
#            - name: Deploying services with an env file
#              uses: brunocascio/ecs-deploy@v2.2.0
#              with:
#                  args: deploy ${{ env.ENVIRONMENT }}-graphacademy-cluster ${{ env.ENVIRONMENT }}-graphacademy-service

    update-eventbridge:
        runs-on: ubuntu-latest
#        needs: [set_environment, assets, deploy]
        needs: [set_environment]
        permissions:
            id-token: write
            contents: read
        env:
            ENVIRONMENT: ${{ needs.set_environment.outputs.environment }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set env variables for secrets
              run: |
                  echo "N_AWS_DEPLOY_ROLE_ARN=${ENVIRONMENT}_GH_OIDC_ROLE_ARN" >> $GITHUB_ENV
                  echo "N_AWS_PRIVATE_SUBNETS=${ENVIRONMENT}_PRIVATE_SUBNETS" >> $GITHUB_ENV
                  echo "N_AWS_SECURITY_GROUP_ID=${ENVIRONMENT}_SECURITY_GROUP" >> $GITHUB_ENV
                  echo "N_AWS_SECRET_ARN=${ENVIRONMENT}_GRAPHACADEMY_SECRET_ARN" >> $GITHUB_ENV

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  role-to-assume: ${{ vars[env.N_AWS_DEPLOY_ROLE_ARN] }}
                  aws-region: ${{ vars.AWS_REGION }}

            - name: Install jq and yq
              run: |
                  sudo apt-get update
                  sudo apt-get install -y wget
                  sudo wget -qO- https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 | sudo tee /usr/bin/jq > /dev/null
                  sudo chmod +x /usr/bin/jq

            - name: Get CRON config from the file
              id: cronConfig
              uses: mikefarah/yq@master
              with:
                  cmd: yq -p yaml -o json '.crons' deployment-config/cron-config-${{ env.ENVIRONMENT }}.yaml

            - name: Read YAML configurations, update EventBridge Schedules and Targets
              env:
                  SECRET_ARN: ${{ vars[env.N_AWS_SECRET_ARN] }}
              run: |
                  AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
                  ENV_NAME=${{ env.ENVIRONMENT }}
                  SECRET_ARN=${{ env.SECRET_ARN }}

                  echo '${{ steps.cronConfig.outputs.result }}' | jq -c '.[]' | while read -r task; do
                    NAME=$(echo $task | jq -r '.name')
                    COMMAND=$(echo $task | jq -c '.command')
                    CRON=$(echo "$task" | jq -r '.cron')
                    ENV_VARS=$(echo $task | jq -c '.env')
                    ENV_VARS_ARRAY=($(echo $ENV_VARS | jq -r '.[]'))
                  
                    TASK_NAME="${ENV_NAME}-graphacademy-${NAME}-task-cron"
                    RULE_NAME="${ENV_NAME}-graphacademy-${NAME}-rule"

                    secrets="["
                    for var in "${ENV_VARS_ARRAY[@]}"; do
                      secret=$(aws secretsmanager get-secret-value --secret-id "${SECRET_ARN}" --query SecretString --output text)
                      value=$(echo $secret | jq -r ".\"$var\"")
                  
                      if [ $? -ne 0 ]; then
                        echo "Failed to parse json value for: $var ðŸš«"
                        exit 1
                      fi

                      env_var="{\"name\":\"${var}\",\"valueFrom\":\"${SECRET_ARN}:${var}::\"}"
                      secrets+="$env_var,"
                    done
                    secrets="${secrets%,}]"

                    EVENTBRIDGE_ROLE="arn:aws:iam::${AWS_ACCOUNT_ID}:role/${ENV_NAME}-graphacademy-ecs-events-role"
                    DEF=$(aws ecs describe-task-definition --task-definition ${ENV_NAME}-graphacademy-task)

                    NEW_DEF=$(echo $DEF | jq --argjson command "$COMMAND" --argjson secrets "$secrets" \
                          '.taskDefinition |
                          del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .environment) |
                          .containerDefinitions[0].command = $command |
                          .containerDefinitions[0].secrets = $secrets |
                          .containerDefinitions[0].logConfiguration.options["awslogs-stream-prefix"] = "cron-'$NAME'" |
                          .containerDefinitions[0].logConfiguration.options["awslogs-group"] = "'$ENV_NAME'-graphacademy-cron" |
                          .family = "'$TASK_NAME'"
                        ')

                    echo "$NEW_DEF" > "new-task-def-${NAME}.json"
                    cat "new-task-def-${NAME}.json"
                    
                    IFS=',' read -ra private_subnets <<< "${{ vars[env.N_AWS_PRIVATE_SUBNETS] }}"
                    export security_group_id="${{ vars[env.N_AWS_SECURITY_GROUP_ID] }}"
                    export private_subnets

                    response=$(aws ecs register-task-definition --cli-input-json file://new-task-def-${NAME}.json)
                    task_arn=$(echo $response | jq -r '.taskDefinition.taskDefinitionArn')
                    target_arn="arn:aws:ecs:${{ vars.AWS_REGION }}:${AWS_ACCOUNT_ID}:cluster/${ENV_NAME}-graphacademy-cluster"

                    aws events put-rule --name $RULE_NAME --schedule-expression "$CRON"
                    put_targets_response=$(aws events put-targets --rule $RULE_NAME --targets "Id=${ENV_NAME}-${NAME}-task-cron,Arn=${target_arn},RoleArn=${EVENTBRIDGE_ROLE},EcsParameters={TaskDefinitionArn=${task_arn},LaunchType=FARGATE,NetworkConfiguration={awsvpcConfiguration={Subnets=[\"${private_subnets[0]}\",\"${private_subnets[1]}\",\"${private_subnets[2]}\"],SecurityGroups=[\"$security_group_id\"],AssignPublicIp=DISABLED}}}")

                    if [ "$(echo $put_targets_response | jq -r '.FailedEntryCount')" -ne 0 ]; then
                      echo "Failed to set targets"
                      exit 1
                    else
                      echo "Target was added successfully âœ…"
                    fi
                  done
