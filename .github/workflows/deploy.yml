name: Deploy to AWS

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - development

jobs:

  set_environment:
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment based on branch
        id: environment_check
        run: |          
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          
          if [[ "$BRANCH_NAME" = "master" ]]; then
            ENVIRONMENT="production"
          else
            ENVIRONMENT=$BRANCH_NAME
          fi
          
          echo "environment=${ENVIRONMENT,,}" >> $GITHUB_OUTPUT
    outputs:
      environment: ${{ steps.environment_check.outputs.ENVIRONMENT }}

  assets:
      runs-on: ubuntu-latest
      needs: set_environment
      permissions:
        id-token: write
        contents: read
      env:
        AWS_REGION: us-east-1
        ENVIRONMENT: ${{ needs.set_environment.outputs.environment }}
        ASSUME_ROLE: ${{ secrets.DEVELOPMENT_GH_OIDC_ROLE_ARN }}

      steps:
          - name: Checkout
            uses: actions/checkout@v4

          - name: Use Node.js 20
            uses: actions/setup-node@v3
            with:
                node-version: '20'

          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v4
            with:
              role-to-assume: ${{ env.ASSUME_ROLE }}
              aws-region: us-east-1

          - name: Install NPM Dependencies
            run: npm install

          - name: Build CSS
            run: npm run build:css

          - name: Build Front-end JS
            run: npm run build:ui

          - name: Sync Assets
            run: aws s3 sync public/ s3://${{ env.ENVIRONMENT }}-graphacademy-assets/assets/ --acl public-read

#    invalidate-cache:
#        runs-on: ubuntu-latest
#        needs: assets
#        steps:
#            - name: Invalidate CloudFront Cache
#              uses: chetan/invalidate-cloudfront-action@v2
#              env:
#                  DISTRIBUTION: ${{ secrets.GA_CLOUDFRONT_DISTRIBUTION }}
#                  PATHS: '/assets'
#                  AWS_REGION: ${{ secrets.AWS_REGION }}
#                  role-to-assume: ${{ secrets.DEVELOPMENT_GH_OIDC_ROLE_ARN }}

  deploy:
      runs-on: ubuntu-latest
      needs: [set_environment, assets]
      permissions:
        id-token: write
        contents: read
      env:
        AWS_REGION: us-east-1
        ENVIRONMENT: ${{ needs.set_environment.outputs.environment }}
        ASSUME_ROLE: ${{ secrets.DEVELOPMENT_GH_OIDC_ROLE_ARN }}
      steps:
          - name: Checkout
            uses: actions/checkout@v4

          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v4
            with:
                role-to-assume: ${{ env.ASSUME_ROLE }}
                aws-region: us-east-1

          - name: Login to Amazon ECR Private
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v2

          - name: Generate timestamp
            id: timestamp
            run: echo "TIMESTAMP=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

          - name: Build and push
            uses: docker/build-push-action@v5
            with:
              context: .
              push: true
              tags: ${{ env.IMAGE }}
            env:
              IMAGE: "${{ steps.login-ecr.outputs.registry }}/${{ env.ENVIRONMENT }}-devrel-graphacademy-repository:${{ steps.timestamp.outputs.TIMESTAMP }}"
              aws-region: ${{ env.AWS_REGION }}

          - name: Set and output URL with tag
            id: output_url
            run: |
              imageURL="${{ steps.login-ecr.outputs.registry }}/${{ env.ENVIRONMENT }}-devrel-graphacademy-repository:${{ steps.timestamp.outputs.TIMESTAMP }}"
              echo "IMAGEURL=$imageURL" >> $GITHUB_OUTPUT
            env:
              REGISTRY: ${{ steps.login-ecr.outputs.registry }}

          - name: Retrieve the latest task definition and update it
            id: register-task-def
            run: |
              IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ENVIRONMENT }}-devrel-graphacademy-repository:${{ steps.timestamp.outputs.TIMESTAMP }}"
              TASK_NAME="${{ env.ENVIRONMENT }}-devrel-graphacademy-task"
              
              TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_NAME)
              if [ $? -ne 0 ]; then
                echo "Failed to describe task definition: $TASK_NAME ðŸš«"
                exit 1
              fi
              if [ -z "$TASK_DEF" ]; then
                echo "No task definition found for: $TASK_NAME ðŸš«"
                exit 1
              fi
              
              get_secret_value() {
                local secret_name=$1
                local secret_value
                secret_value=$(aws secretsmanager get-secret-value --secret-id "$secret_name" --query "SecretString" --output text)
                if [ $? -ne 0 ]; then
                  echo "Failed to fetch $secret_name from AWS Secrets Manager ðŸš«"
                  exit 1
                fi
              }
              
              NEO4J_HOST=$(get_secret_value "${{ env.ENVIRONMENT }}/graphacademy/NEO4J_HOST" | jq -r .NEO4J_HOST)
              NEO4J_USERNAME=$(get_secret_value "${{ env.ENVIRONMENT }}/graphacademy/NEO4J_USERNAME" | jq -r .NEO4J_USERNAME)
              NEO4J_PASSWORD=$(get_secret_value "${{ env.ENVIRONMENT }}/graphacademy/NEO4J_PASSWORD" | jq -r .NEO4J_PASSWORD)
              BASE_URL=$(get_secret_value "${{ env.ENVIRONMENT }}/graphacademy/BASE_URL" | jq -r .BASE_URL)
              COMMUNITY_GRAPH_HOST=$(get_secret_value "${{ env.ENVIRONMENT }}/graphacademy/COMMUNITY_GRAPH_HOST" | jq -r .COMMUNITY_GRAPH_HOST)
              COMMUNITY_GRAPH_PASSWORD=$(get_secret_value "${{ env.ENVIRONMENT }}/graphacademy/COMMUNITY_GRAPH_PASSWORD" | jq -r .COMMUNITY_GRAPH_PASSWORD)
              COMMUNITY_GRAPH_USERNAME=$(get_secret_value "${{ env.ENVIRONMENT }}/graphacademy/COMMUNITY_GRAPH_USERNAME" | jq -r .COMMUNITY_GRAPH_USERNAME)
              AUTH0_CLIENT_ID=$(get_secret_value "${{ env.ENVIRONMENT }}/graphacademy/AUTH0_CLIENT_ID" | jq -r .AUTH0_CLIENT_ID)
              AUTH0_CLIENT_SECRET=$(get_secret_value "${{ env.ENVIRONMENT }}/graphacademy/AUTH0_CLIENT_SECRET" | jq -r .AUTH0_CLIENT_SECRET)
              AUTH0_ISSUER_BASE_URL=$(get_secret_value "${{ env.ENVIRONMENT }}/graphacademy/AUTH0_ISSUER_BASE_URL" | jq -r .AUTH0_ISSUER_BASE_URL)
  
              NEW_TASK_DEF=$(echo "$TASK_DEF" | jq --arg IMAGE_URI "$IMAGE_URI" \
                                                   --arg NEO4J_HOST "$NEO4J_HOST" \
                                                   --arg NEO4J_USERNAME "$NEO4J_USERNAME" \
                                                   --arg NEO4J_PASSWORD "$NEO4J_PASSWORD" \
                                                   --arg BASE_URL "$BASE_URL" \
                                                   --arg COMMUNITY_GRAPH_HOST "$COMMUNITY_GRAPH_HOST" \
                                                   --arg COMMUNITY_GRAPH_PASSWORD "$COMMUNITY_GRAPH_PASSWORD" \
                                                   --arg AUTH0_CLIENT_ID "$AUTH0_CLIENT_ID" \
                                                   --arg AUTH0_CLIENT_SECRET "$AUTH0_CLIENT_SECRET" \
                                                   --arg AUTH0_ISSUER_BASE_URL "$AUTH0_ISSUER_BASE_URL" \
                                                   --arg COMMUNITY_GRAPH_USERNAME "$COMMUNITY_GRAPH_USERNAME" '
              .taskDefinition |
              del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy) |
              .containerDefinitions[0].image = $IMAGE_URI |
              .containerDefinitions[0].environment = [
                  {"name": "NEO4J_HOST", "value": $NEO4J_HOST},
                  {"name": "NEO4J_USERNAME", "value": $NEO4J_USERNAME},
                  {"name": "NEO4J_PASSWORD", "value": $NEO4J_PASSWORD},
                  {"name": "BASE_URL", "value": $BASE_URL},
                  {"name": "COMMUNITY_GRAPH_HOST", "value": $COMMUNITY_GRAPH_HOST},
                  {"name": "COMMUNITY_GRAPH_PASSWORD", "value": $COMMUNITY_GRAPH_PASSWORD},
                  {"name": "COMMUNITY_GRAPH_USERNAME", "value": $COMMUNITY_GRAPH_USERNAME},
                  {"name": "AUTH0_CLIENT_ID", "value": $AUTH0_CLIENT_ID},
                  {"name": "AUTH0_CLIENT_SECRET", "value": $AUTH0_CLIENT_SECRET},
                  {"name": "AUTH0_ISSUER_BASE_URL", "value": $AUTH0_ISSUER_BASE_URL}
                ]
              ')
              echo "$NEW_TASK_DEF"
              echo "$NEW_TASK_DEF" > new-task-def.json
            env:
              AWS_REGION: us-east-1
          - name: Deploy new task definition to ECS
            uses: aws-actions/amazon-ecs-deploy-task-definition@v1
            with:
              service: ${{ env.ENVIRONMENT }}-devrel-graphacademy-service
              cluster: ${{ env.ENVIRONMENT }}-devrel-graphacademy-cluster
              task-definition: new-task-def.json

  update-eventbridge:
    runs-on: ubuntu-latest
    needs: [set_environment, assets, deploy]
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: us-east-1
      ENVIRONMENT: ${{ needs.set_environment.outputs.environment }}
      ASSUME_ROLE: ${{ secrets.DEVELOPMENT_GH_OIDC_ROLE_ARN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ASSUME_ROLE }}
          aws-region: us-east-1

      - name: Install jq and yq
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          sudo wget -qO- https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 | sudo tee /usr/bin/jq > /dev/null
          sudo chmod +x /usr/bin/jq
          sudo wget -qO- https://github.com/mikefarah/yq/releases/download/3.4.1/yq_linux_amd64 | sudo tee /usr/bin/yq > /dev/null
          sudo chmod +x /usr/bin/yq

      - name: Read YAML configurations, update EventBridge Schedules and Targets
        run: |
          tasks=$(yq r -j deployment-config/cron-config.yaml crons)
          
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ENV_NAME=${{ env.ENVIRONMENT }}
          
          echo "$tasks" | jq -c '.[]' | while read -r task; do
            NAME=$(echo $task | jq -r '.name')
            COMMAND=$(echo $task | jq -c '.command')
            CRON=$(echo "$task" | jq -r '.cron')
            ENV_VARS=$(echo $task | jq -c '.env')
            TASK_NAME="${ENV_NAME}-graphacademy-${NAME}-task-cron"
            RULE_NAME="${ENV_NAME}-graphacademy-${NAME}-rule"
            ENV_VARS_ARRAY=($(echo $ENV_VARS | jq -r '.[]'))

            output="["
            for var in "${ENV_VARS_ARRAY[@]}"; do
              secret_name="${ENV_NAME}/graphacademy/$var"
              
              if [[ ! $secret_name =~ ^[a-zA-Z0-9/_+=.@-]+$ ]]; then
                echo "Invalid secret name: $secret_name ðŸš«"
                exit 1
              fi
              
              secret=$(aws secretsmanager get-secret-value --secret-id "$secret_name" --region us-east-1 --query SecretString --output text)
              if [ $? -ne 0 ]; then
                echo "Failed to fetch secret: $secret_name ðŸš«"
                exit 1
              fi
          
              value=$(echo $secret | jq -r ".\"$var\"")
              if [ $? -ne 0 ]; then
                echo "Failed to parse json value for: $var ðŸš«"
                exit 1
              fi
          
              env_var="{\"name\":\"$var\",\"value\":\"$value\"}"
              output+="$env_var,"
            done
            output="${output%,}]"
          
            EVENTBRIDGE_ROLE="arn:aws:iam::${AWS_ACCOUNT_ID}:role/${ENV_NAME}-devrel-graphacademy-ecs-events-role"
            DEF=$(aws ecs describe-task-definition --task-definition ${ENV_NAME}-devrel-graphacademy-task)
          
            NEW_DEF=$(echo $DEF | jq --argjson command "$COMMAND" --argjson environment "$output" \
                  '.taskDefinition |
                  del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy) |
                  .containerDefinitions[0].command = $command |
                  .containerDefinitions[0].environment = $environment |
                  .family = "'$TASK_NAME'"
                ')
          
            echo "$NEW_DEF" > "new-task-def-${NAME}.json"
            
            cluster_name=${ENV_NAME}-devrel-graphacademy-cluster
            response=$(aws ecs register-task-definition --cli-input-json file://new-task-def-${NAME}.json)
            revision=$(echo $response | jq -r '.taskDefinition.revision')
            task_arn=$(echo $response | jq -r '.taskDefinition.taskDefinitionArn')
            target_arn="arn:aws:ecs:us-east-1:${AWS_ACCOUNT_ID}:cluster/${cluster_name}"  
          
            aws events put-rule --name $RULE_NAME --schedule-expression "$CRON"
          
            put_targets_response=$(aws events put-targets --rule $RULE_NAME --targets "Id=${ENV_NAME}-${NAME}-task-cron,Arn=${target_arn},RoleArn=${EVENTBRIDGE_ROLE},EcsParameters={TaskDefinitionArn=${task_arn}}")          
            echo "FailedEntryCount: $(echo $put_targets_response | jq -r '.FailedEntryCount')"
            if [ "$(echo $put_targets_response | jq -r '.FailedEntryCount')" -ne 0 ]; then
              echo "Failed to set targets"
              exit 1
            else
              echo "Target was added successfully âœ…"
            fi
          done
  
    
    
  
