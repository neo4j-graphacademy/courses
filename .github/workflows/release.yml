name: Release

on:
  push:
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v2.1.3
    branches:
      - development

jobs:
  set_environment:
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment based on branch
        id: environment_check
        shell: bash
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          BRANCH_NAME=${BRANCH_NAME#refs/tags/}

          ENVIRONMENT="development"
          if [[ "$BRANCH_NAME" == v* ]]; then
            ENVIRONMENT="production"
          fi

          echo "environment=${ENVIRONMENT,,}" >> $GITHUB_OUTPUT
    outputs:
      environment: ${{ steps.environment_check.outputs.environment }}

  update_database:
    runs-on: ubuntu-latest
    needs: set_environment
    env:
      ENVIRONMENT: ${{ needs.set_environment.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 16
        uses: actions/setup-node@v4
        with:
          node-version: "16"

      - name: Install NPM Dependencies
        run: npm install --include=dev

      # Sync content to production DB
      - name: Sync content to Prod Instance
        if: env.ENVIRONMENT == 'production'
        env:
          NEO4J_HOST: ${{ secrets.PROD_NEO4J_HOST }}
          NEO4J_USERNAME: ${{ secrets.PROD_NEO4J_USERNAME }}
          NEO4J_PASSWORD: ${{ secrets.PROD_NEO4J_PASSWORD }}
        run: npm run sync:db

      # Test the database
      - name: Test Database
        if: env.ENVIRONMENT == 'production'
        env:
          NEO4J_HOST: ${{ secrets.PROD_NEO4J_HOST }}
          NEO4J_USERNAME: ${{ secrets.PROD_NEO4J_USERNAME }}
          NEO4J_PASSWORD: ${{ secrets.PROD_NEO4J_PASSWORD }}
        run: npm run test:db

  sync_assets:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: [set_environment, update_database]
    env:
      ENVIRONMENT: ${{ needs.set_environment.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set env variables for secrets
        run: |
          echo "N_AWS_DEPLOY_ROLE_ARN=${ENVIRONMENT}_GH_OIDC_ROLE_ARN" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars[env.N_AWS_DEPLOY_ROLE_ARN] }}
          aws-region: ${{ vars.AWS_REGION }}

      # Sync images to CDN
      - name: Sync public/ to S3
        if: env.ENVIRONMENT == 'production'
        run: aws s3 sync ./public s3://${{ secrets.GA_S3_BUCKET }}/assets --acl public-read

  upload_zip:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: [set_environment, update_database, sync_assets]
    env:
      ENVIRONMENT: ${{ needs.set_environment.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set env variables for secrets
        run: |
          echo "N_AWS_DEPLOY_ROLE_ARN=${ENVIRONMENT}_GH_OIDC_ROLE_ARN" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars[env.N_AWS_DEPLOY_ROLE_ARN] }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Create course asciidoc zip
        run: npm run build:content

      - name: Upload courses to S3
        run: |
          aws s3 cp ./courses.zip "s3://${{ env.ENVIRONMENT }}-graphacademy-certs-courses/content/courses.zip"

      - name: Install NPM Dependencies
        run: npm install --include=dev

      - name: Create HTML zip
        run: npm run build:html

      - name: Upload HTML to S3
        run: |
          aws s3 cp ./html.zip "s3://${{ env.ENVIRONMENT }}-graphacademy-certs-courses/content/html.zip"

  restart-cluster:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: [set_environment, update_database, sync_assets, upload_zip]
    env:
      ENVIRONMENT: ${{ needs.set_environment.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set env variables for secrets
        run: |
          echo "N_AWS_DEPLOY_ROLE_ARN=${ENVIRONMENT}_GH_OIDC_ROLE_ARN" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars[env.N_AWS_DEPLOY_ROLE_ARN] }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Deploying services with an env file
        uses: brunocascio/ecs-deploy@v2.2.0
        env:
          CLUSTER_NAME: ${{ env.ENVIRONMENT }}-graphacademy-cluster
          SERVICE_NAME: ${{ env.ENVIRONMENT }}-graphacademy-service
        with:
          args: deploy ${{ env.CLUSTER_NAME }} ${{ env.SERVICE_NAME }} --timeout -1

  invalidate_cache:
    runs-on: ubuntu-latest
    needs: [set_environment, update_database, sync_assets, upload_zip]
    env:
      ENVIRONMENT: ${{ needs.set_environment.outputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set env variables for secrets
        run: |
          echo "N_AWS_DEPLOY_ROLE_ARN=${ENVIRONMENT}_GH_OIDC_ROLE_ARN" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars[env.N_AWS_DEPLOY_ROLE_ARN] }}
          aws-region: ${{ vars.AWS_REGION }}

      # Invalidate the CDN cache
      - name: Invalidate CloudFront Cache
        uses: chetan/invalidate-cloudfront-action@v2
        if: env.ENVIRONMENT == 'production'
        env:
          DISTRIBUTION: ${{ secrets.GA_CLOUDFRONT_DISTRIBUTION }}
          PATHS: "/*"
          AWS_REGION: ${{ vars.AWS_REGION }}
