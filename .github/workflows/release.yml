name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v2.1.3

jobs:
  assets:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js 16
        uses: actions/setup-node@v1
        with:
          node-version: "16"

      # Configure AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEVREL_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEVREL_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.GA_AWS_REGION }}

      - name: Install NPM Dependencies
        run: npm install

      # build css, js
      - name: Build CSS
        run: npm run build:css

      - name: Build Front-end JS
        run: npm run build:ui

      # Sync assets to CDN
      - name: Sync Assets
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read
        env:
          AWS_S3_BUCKET: ${{ secrets.GA_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.DEVREL_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEVREL_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.GA_AWS_REGION }}
          SOURCE_DIR: "public"
          DEST_DIR: "assets"

  invalidate-cache:
    runs-on: ubuntu-latest
    needs: assets
    steps:
      # Invalidate the CDN cache
      - name: Invalidate CloudFront Cache
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: ${{ secrets.GA_CLOUDFRONT_DISTRIBUTION }}
          PATHS: "/assets"
          AWS_REGION: ${{ secrets.GA_AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.DEVREL_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEVREL_SECRET_ACCESS_KEY }}

  login-to-amazon-ecr:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AC_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AC_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.GA_AWS_REGION }}
          mask-aws-account-id: 'false'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
      docker_username: ${{ steps.login-ecr.outputs.docker_username_715633473519_dkr_ecr_us_east_1_amazonaws_com }}
      docker_password: ${{ steps.login-ecr.outputs.docker_password_715633473519_dkr_ecr_us_east_1_amazonaws_com }}

  rebuild:
    needs: login-to-amazon-ecr
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Configure AWS
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     # role-to-assume: ${{ secrets.GA_AWS_EKS_ROLE }}
      #     aws-access-key-id: ${{ secrets.AC_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AC_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.GA_AWS_REGION }}

      # - name: Login to Amazon ECR Private
      #   uses: aws-actions/amazon-ecr-login@v1

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ needs.login-to-amazon-ecr.outputs.docker_username }}
      #     password: ${{ needs.login-to-amazon-ecr.outputs.docker_password }}

      # Build docker image
      - name: Build Server Image
        uses: hiberbee/github-action-skaffold@1.19.0
        with:
          command: build
          tag: latest
        env:
          GITHUB_OAUTH_TOKEN: ${{ secrets.AC_GITHUB_OAUTH_TOKEN }}

      # Restart cluster with new image
      - name: Restart Cluster
        uses: kenju/kubernetes-action@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: "rollout restart -n graphacademy-prod deployment/graphacademy"
