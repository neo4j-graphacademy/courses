name: Release

on:
    workflow_dispatch:
    push:
        tags:
            - 'v*' # Push events to matching v*, i.e. v1.0, v2.1.3

jobs:
    assets:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Use Node.js 16
              uses: actions/setup-node@v3
              with:
                  node-version: '16'

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.GA_DEPLOY_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.GA_DEPLOY_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.GA_AWS_REGION }}

            - name: Install NPM Dependencies
              run: npm install

            - name: Build CSS
              run: npm run build:css

            - name: Build Front-end JS
              run: npm run build:ui

            - name: Sync Assets
              uses: jakejarvis/s3-sync-action@master
              with:
                  args: --acl public-read
              env:
                  AWS_S3_BUCKET: ${{ secrets.GA_S3_BUCKET }}
                  AWS_ACCESS_KEY_ID: ${{ secrets.GA_DEPLOY_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.GA_DEPLOY_SECRET_ACCESS_KEY }}
                  AWS_REGION: ${{ secrets.GA_AWS_REGION }}
                  SOURCE_DIR: 'public'
                  DEST_DIR: 'assets'

    invalidate-cache:
        runs-on: ubuntu-latest
        needs: assets
        steps:
            - name: Invalidate CloudFront Cache
              uses: chetan/invalidate-cloudfront-action@v2
              env:
                  DISTRIBUTION: ${{ secrets.GA_CLOUDFRONT_DISTRIBUTION }}
                  PATHS: '/assets'
                  AWS_REGION: ${{ secrets.GA_AWS_REGION }}
                  AWS_ACCESS_KEY_ID: ${{ secrets.GA_DEPLOY_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.GA_DEPLOY_SECRET_ACCESS_KEY }}

    rebuild:
        runs-on: ubuntu-latest
        needs: invalidate-cache
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.GA_DEPLOY_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.GA_DEPLOY_SECRET_ACCESS_KEY }}
                  aws-region: us-east-1

            - name: Login to Amazon ECR Private
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: Create tag
              id: create_tag
              uses: anothrNick/github-tag-action@1.39.0
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                WITH_V: true
                FIRST_VERSION: '1.0.0'
                DEFAULT_BUMP: minor

            - name: Build and push
              uses: docker/build-push-action@v5
              env:
                  GITHUB_OAUTH_TOKEN: ${{ secrets.AC_GITHUB_OAUTH_TOKEN }}
              with:
                  context: .
                  push: true
                  tags: "${{steps.login-ecr.outputs.registry}}/graphacademy:${{steps.create_tag.outputs.tag}}"

    rollout:
        runs-on: ubuntu-latest
        needs: rebuild
        steps:
            - name: Install AWS CLI
              uses: unfor19/install-aws-cli-action@v1

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.GA_DEPLOY_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.GA_DEPLOY_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.GA_AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Pull container definition
              run: |
                aws ecs describe-task-definition --task-definition graphacademy-task > task-definition.json

            - name: Update task definition
              run: |
                jq '.taskDefinition.containerDefinitions[0].image = env.TARGET_IMAGE' task-definition.json > new-task-def.json
              env:
                TARGET_IMAGE: "${{ steps.login-ecr.outputs.registry }}/graphacademy:${{ needs.rebuild.outputs.tag }}"

            - name: Register new task definition
              id: update_task_def
              run: |
                TASK_DEFINITION_OUTPUT=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json)
                NEW_REVISION=$(echo $TASK_DEFINITION_OUTPUT | jq -r '.taskDefinition.revision')
                TARGET_ID=$(echo $TASK_DEFINITION_OUTPUT | jq -r '.taskDefinition.taskDefinitionArn')
                TARGET_ARN=$(echo $TASK_DEFINITION_OUTPUT | jq -r '.taskDefinition.taskRoleArn')
                echo "::set-output name=new_revision::$NEW_REVISION"
                echo "::set-output name=target_id::$TARGET_ID"
                echo "::set-output name=target_arn::$TARGET_ARN"

            - name: Update AWS ECS service
              run: |
                aws ecs update-service --cluster Devrel-graphacademy-cluster --service Devrel-graphacademy-service --task-definition graphacademy-task:${{env.NEW_REVISION}}
              env:
                NEW_REVISION: ${{ steps.update_task_def.outputs.new_revision }}

        outputs:
          new_revision: ${{ steps.update_task_def.outputs.new_revision }}
          target_id: ${{ steps.update_task_def.outputs.target_id }}
          target_arn: ${{ steps.update_task_def.outputs.target_arn }}

    update-eventbridge:
      runs-on: ubuntu-latest
      needs: set-env
      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}

        - name: Install dependencies
          run: |
            sudo apt-get update
            sudo apt-get install jq
            sudo pip install yq

        - name: Read YAML configurations, register new tasks, update EventBridge Schedules and Targets
          run: |
            yq e ".env" deployment-config/cron-config.yaml > env.json
            CERTIFICATIONS_CRON=$(yq e ".certifications.cron" deployment-config/cron-config.yaml)
            CERTIFICATIONS_COMMAND=$(yq e ".certifications.command" deployment-config/cron-config.yaml)
            CERTIFICATIONS_TASK_NAME=$(yq e ".certifications.taskName" deployment-config/cron-config.yaml)
            
            REMINDERS_CRON=$(yq e ".reminders.cron" deployment-config/cron-config.yaml)
            REMINDERS_COMMAND=$(yq e ".reminders.command" deployment-config/cron-config.yaml)
            REMINDERS_TASK_NAME=$(yq e ".reminders.taskName" deployment-config/cron-config.yaml)

            CERT_DEF=$(aws ecs describe-task-definition --task-definition $CERTIFICATIONS_TASK_NAME)
            REM_DEF=$(aws ecs describe-task-definition --task-definition $REMINDERS_TASK_NAME)
            
            NEW_CERT_DEF=$(echo $CERT_DEF | jq '.taskDefinition | .containerDefinitions[0].environment=env | .containerDefinitions[0].command=["'${CERTIFICATIONS_COMMAND}'"]')
            NEW_REM_DEF=$(echo $REM_DEF | jq '.taskDefinition | .containerDefinitions[0].environment=env | .containerDefinitions[0].command=["'${REMINDERS_COMMAND}'"]')
            
            CERTIFICATIONS_REVISION=$(aws ecs register-task-definition --cli-input-json "$NEW_CERT_DEF" --query 'taskDefinition.revision' --output text)
            REMINDERS_REVISION=$(aws ecs register-task-definition --cli-input-json "$NEW_REM_DEF" --query 'taskDefinition.revision' --output text)

            AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            aws events put-rule --name $CERTIFICATIONS_RULE_NAME --schedule-expression "$CERTIFICATIONS_CRON"
            aws events put-targets --rule $CERTIFICATIONS_RULE_NAME --targets "Id=$TARGET_ID,Arn=$TARGET_ARN,EcsParameters={TaskDefinitionArn=arn:aws:ecs:${{ secrets.AWS_REGION }}:${{ AWS_ACCOUNT_ID }}:task-definition/$CERTIFICATIONS_TASK_NAME:$CERTIFICATIONS_REVISION}"
            
            aws events put-rule --name $REMINDERS_RULE_NAME --schedule-expression "$REMINDERS_CRON"
            aws events put-targets --rule $REMINDERS_RULE_NAME --targets "Id=$TARGET_ID,Arn=$TARGET_ARN,EcsParameters={TaskDefinitionArn=arn:aws:ecs:${{ secrets.AWS_REGION }}:${{ AWS_ACCOUNT_ID }}:task-definition/$REMINDERS_TASK_NAME:$REMINDERS_REVISION}"

    cleanup:
      runs-on: ubuntu-latest
      needs: [rollout, update-eventbridge]
      if: always()
      steps:
        - name: Remove temp files
          run: |
            if test -f "env.json"; then
                rm env.json
            fi
            if test -f "task-definition.json"; then
                rm task-definition.json
            fi
            if test -f "new-task-def.json"; then
                rm new-task-def.json
            fi