name: Release

on:
  push:
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v2.1.3

jobs:
  update-database:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 16
        uses: actions/setup-node@v4
        env:
          NEO4J_HOST: ${{ secrets.PROD_NEO4J_HOST }}
          NEO4J_USERNAME: ${{ secrets.PROD_NEO4J_USERNAME }}
          NEO4J_PASSWORD: ${{ secrets.PROD_NEO4J_PASSWORD }}
        with:
          node-version: "16"

      - name: Install NPM Dependencies
        run: npm install

      # Sync content to production DB
      - name: Sync content to Prod Instance
        env:
          NEO4J_HOST: ${{ secrets.PROD_NEO4J_HOST }}
          NEO4J_USERNAME: ${{ secrets.PROD_NEO4J_USERNAME }}
          NEO4J_PASSWORD: ${{ secrets.PROD_NEO4J_PASSWORD }}
        run: npm run sync:db

      # Test the database
      - name: Test Database
        env:
          NEO4J_HOST: ${{ secrets.PROD_NEO4J_HOST }}
          NEO4J_USERNAME: ${{ secrets.PROD_NEO4J_USERNAME }}
          NEO4J_PASSWORD: ${{ secrets.PROD_NEO4J_PASSWORD }}
        run: npm run test:db

  sync-assets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Sync images to CDN
      - name: Sync public/ to S3
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --acl public-read
        env:
          AWS_S3_BUCKET: ${{ secrets.GA_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AC_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AC_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.GA_AWS_REGION }}
          SOURCE_DIR: "public"
          DEST_DIR: "assets"

      # upload zip file to s3
      - name: Upload asciidoc to S3
        run: npm run sync:content

  restart-cluster:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs:
      - update-database
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.GH_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.GA_AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploying services with an env file
        uses: brunocascio/ecs-deploy@v2.2.0
        with:
          args: deploy production-graphacademy-cluster production-graphacademy-service

  invalidate-cache:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs:
      - sync-assets
    steps:
      # Configure AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.GH_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.GA_AWS_REGION }}

      # Invalidate the CDN cache
      - name: Invalidate CloudFront Cache
        uses: badsyntax/github-action-aws-cloudfront@v1.0.1
        with:
          distribution-id: ${{ secrets.GA_CLOUDFRONT_DISTRIBUTION }}
          invalidate-paths: "/*"
          aws-region: ${{ secrets.GA_AWS_REGION }}
