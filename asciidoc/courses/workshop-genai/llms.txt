# Neo4j & Generative AI Hands-On Workshop

Learn how Neo4j and GraphRAG can support your Generative AI projects

[Learn more about this course](mdc:https://graphacademy.neo4j.com/courses/workshop-genai)

## Concepts

* **Generative AI (GenAI)** - Artificial intelligence systems that create new content using patterns learned from training data, including text, images, audio, or code
* **Large Language Models (LLMs)** - Generative AI models that understand and generate human-like text based on statistical patterns from training data
* **Knowledge Graphs** - Graph databases using nodes (entities), relationships (connections), and properties (attributes) to organize and access interrelated data
* **Retrieval-Augmented Generation (RAG)** - Architecture combining LLMs with external data retrieval to provide accurate, contextual responses grounded in domain-specific data
* **GraphRAG** - Advanced RAG approach using knowledge graphs to provide structured, relationship-aware retrieval instead of flat document chunks
* **Vector Embeddings** - Numerical representations of text that capture semantic meaning, enabling similarity search based on context rather than keywords
* **Retrievers** - Components that search and return relevant information from knowledge graphs to answer questions or provide context to language models
* **Agents** - Conversational wrappers around retrievers that analyze queries, select appropriate tools, and maintain conversation context
* **Schema-Driven Extraction** - Using predefined entity types and relationships to guide AI extraction of structured data from unstructured documents

## Overview

### Summary of Lessons on Generative AI, Knowledge Graphs, and Retrievers

#### **Module 1: Generative AI**
1. **What is Generative AI**  
   - Generative AI systems create new content resembling human-made data (text, images, audio, code).  
   - Models like GPT and DALL-E are trained on large datasets, learning patterns to generate coherent outputs.  
   - Generative AI lacks true understanding, relying on statistical patterns from training data.  
   - Applications include chatbots, content creation, image synthesis, and code generation.  

2. **Large Language Models (LLMs)**  
   - LLMs are generative AI models designed for human-like text generation.  
   - They perform tasks like answering questions, summarizing data, and analyzing text.  
   - Responses are probabilistic continuations of instructions based on learned patterns.  

3. **Knowledge Graphs**  
   - Knowledge graphs organize interrelated data using design patterns.  
   - They enable structured access to entities and relationships, enhancing context-aware retrieval.  

---

#### **Module 2: Retrievers**
1. **What is a Retriever**  
   - Retrievers search and return relevant information from a knowledge graph.  
   - Types of retrievers:  
     - **Vector Retriever**: Semantic search across text chunks.  
     - **Vector + Cypher Retriever**: Combines semantic search with graph traversal.  
     - **Text2Cypher Retriever**: Converts natural language to Cypher queries for precise answers.  

2. **Hands-On with Retrievers**  
   - Explored retrievers in a Jupyter notebook:  
     - **Vector Retriever**: Finds semantically similar text chunks.  
     - **Vector + Cypher Retriever**: Adds contextual relationships to semantic search.  
     - **Text2Cypher Retriever**: Handles structured queries for precise data.  
   - Compared retriever results for broad, entity-specific, and precise questions.  

---

#### **Module 3: Agents**
1. **What is an Agent**  
   - Agents wrap retrievers into conversational tools for intelligent query handling.  
   - They analyze user queries, select the appropriate retriever tool, and format responses.  

2. **Building Agents**  
   - **First Agent**: Schema introspection tool for database exploration.  
   - **Enhanced Agent**: Added document and graph retrieval tool for semantic and contextual search.  
   - **Complete Agent**: Added Text2Cypher tool for precise database queries.  

3. **Agent Capabilities**  
   - Combines retrievers for comprehensive query handling:  
     - Schema exploration.  
     - Contextual relationship traversal.  
     - Precise structured queries.  
   - Intelligent tool selection based on question type.  

---

#### **Key Insights**
- Generative AI models excel at creating coherent outputs but lack true understanding.  
- Knowledge graphs enhance retrieval by preserving connections and enabling context-aware search.  
- Retrievers and agents provide flexible, intelligent interfaces for querying knowledge graphs.  
- Combining retrievers into agents allows for conversational, multi-tool reasoning.  


## Summary

This comprehensive implementation guide covers:

**Core Technologies:**
- Neo4j GraphRAG with Python for building intelligent retrieval systems
- OpenAI LLM and embeddings for semantic understanding
- LangChain agents for conversational interfaces

**Key Patterns:**
- **Vector Retrieval** for semantic exploration and broad topic search
- **Vector + Cypher Retrieval** for contextual search with entity relationships  
- **Text2Cypher Retrieval** for precise structured queries and aggregations
- **Agent Orchestration** for intelligent tool selection and conversation management

**Production Considerations:**
- Error handling and fallback strategies
- Health monitoring and system diagnostics
- Query routing and intent analysis
- Context management and conversation flow

**Best Practices:**
- Use schema-driven extraction for consistent data quality
- Implement proper connection management and cleanup
- Design retrieval queries that match your use cases
- Combine multiple retrieval strategies for comprehensive coverage

This framework enables building production-ready GraphRAG applications that can handle complex queries across structured and unstructured data while maintaining conversational interfaces for end users.
