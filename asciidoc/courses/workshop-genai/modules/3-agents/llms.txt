# Module 3: Agents

## Learning Objectives:

- Setup your development environment.
- Learn about the different types of retrievers.
- Create a vector + cypher retriever.
- Create a text to Cypher retriever.

## Key Concepts Covered:

- **Agents:** Conversational wrappers around retrievers (Schema, Vector+Cypher, Text2Cypher).
- **Tools:** Retrievers wrapped for agent use.
- **Agent Intelligence:** Adds user query analysis, natural language interface, automatic tool selection, and flexible context management.

Agent Capabilities:

1. **Schema Tool:** Database schema exploration.
2. **Vector + Cypher Tool:** Contextual relationships.
3. **Text2Cypher Tool:** Precise structured queries.

Agent Reasoning Process:

1. Analyze user question.
2. Determine required information type.
3. Select appropriate retriever tool(s).
4. Execute tool and format response.
5. Maintain conversation context.

What Agents Add:
- Conversational interface.
- Intelligent tool selection based on question type.
- Enhanced retriever functionality.

Agents make retrievers conversational, enabling natural language interaction and dynamic tool selection for optimal answers.

## Example Code for Agents

## Building Conversational Agents with LangChain

```python
from langchain.chat_models import init_chat_model
from langgraph.prebuilt import create_react_agent
from langchain_core.tools import tool
from langchain_neo4j import Neo4jGraph, Neo4jVector
from langchain_openai import OpenAIEmbeddings

# Initialize LLM for agent
model = init_chat_model("gpt-4o", model_provider="openai")

# Connect to Neo4j for agent operations
graph = Neo4jGraph(
    url=os.getenv("NEO4J_URI"),
    username=os.getenv("NEO4J_USERNAME"), 
    password=os.getenv("NEO4J_PASSWORD"),
)

# Tool 1: Schema introspection
@tool("Get-graph-database-schema")
def get_schema():
    """Get the schema of the graph database."""
    return graph.schema

# Tool 2: Document retrieval with graph context
embedding_model = OpenAIEmbeddings(model="text-embedding-ada-002")

# Retrieval query for contextual information
retrieval_query = """
MATCH (node)-[:FROM_DOCUMENT]-(doc:Document)-[:FILED]-(company:Company)
RETURN 
    node.text as text,
    score,
    {
        company: company.name,
        risks: [ (company:Company)-[:FACES_RISK]->(risk:RiskFactor) | risk.name ]
    } AS metadata
ORDER BY score DESC
"""

# Create vector index for document search
chunk_vector = Neo4jVector.from_existing_index(
    embedding_model,
    graph=graph,
    index_name="chunkEmbeddings",
    embedding_node_property="embedding",
    text_node_property="text",
    retrieval_query=retrieval_query,
)

@tool("Retrieve-financial-documents")
def retrieve_docs(query: str):
    """Find details about companies in their financial documents."""
    context = chunk_vector.similarity_search(query, k=3)
    return context

# Tool 3: Text2Cypher for structured queries
@tool("Execute-cypher-query")
def execute_cypher(natural_language_query: str):
    """Convert natural language to Cypher and execute against the graph."""
    # Use Text2CypherRetriever to generate Cypher
    text2cypher = Text2CypherRetriever(driver=driver, llm=llm, neo4j_schema=schema)
    result = text2cypher.get_search_results(natural_language_query)
    
    # Execute the generated Cypher
    cypher_query = result.metadata["cypher"]
    execution_result = driver.execute_query(cypher_query)
    
    return {
        "generated_cypher": cypher_query,
        "results": [dict(record) for record in execution_result.records]
    }

# Create agent with all tools
tools = [get_schema, retrieve_docs, execute_cypher]
agent = create_react_agent(model, tools)


"""Run agent conversation with streaming output"""
print(f"Query: {query}")
print("Agent Response:")

for step in agent.stream(
    {"messages": [{"role": "user", "content": query}]},
    stream_mode="values",
):
    step["messages"][-1].pretty_print()

# Example conversations

# "Summarize the schema of the graph database."
# "What risk factors are mentioned in Apple's financial documents?"
# "How many companies does BlackRock own?"
# "Which asset managers are most affected by banking regulations?"

```
