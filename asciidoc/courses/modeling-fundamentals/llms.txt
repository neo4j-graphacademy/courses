# Graph Data Modeling Fundamentals

Learn how to design a Neo4j graph using best practices

[Learn more about this course](https://graphacademy.neo4j.com/courses/modeling-fundamentals)

## Concepts

* **Graph Data Model** - Conceptual representation defining entities, relationships, and properties for a Neo4j database
* **Instance Model** - Actual graph with real data following the data model structure
* **Entity** - Dominant nouns in use cases that become labeled nodes (people, movies, companies)
* **Use Cases** - Specific questions the application must answer, driving model design
* **Refactoring** - Modifying the model and transforming data to improve performance or accommodate new requirements
* **Fanout** - Splitting entities into multiple connected nodes, risking supernode creation
* **Supernode** - Node with 100K+ relationships causing performance issues
* **Anchor Properties** - Properties for unique identification and query starting points

## Graph Data Modeling Process

### 1. Understand Domain and Define Use Cases
1. **Collaborate with stakeholders** to identify key business questions
2. **Write specific use cases** and prioritize by frequency/importance
3. **Document expected data volumes** for each entity type

### 2. Develop Initial Model
1. **Extract entities** (nouns) → **node labels** (CamelCase)
2. **Extract connections** (verbs) → **relationship types** (ALL_CAPS_UNDERSCORE)
3. **Determine relationship directions** based on use case navigation
4. **Define properties** needed to answer use case questions

### 3. Test and Refactor
1. **Create test instance** with representative sample data
2. **Write/profile Cypher queries** for each use case
3. **Monitor performance** as data grows and refactor when needed

[Reference: What is Graph Data Modeling?](https://graphacademy.neo4j.com/courses/modeling-fundamentals/1-getting-started/1-what-is-modeling)

## Node and Relationship Modeling

### Node Labels and Properties
**DO:**
* Use CamelCase labels representing clear business entities (`:Person`, `:MovieGenre`)
* Use multiple labels for different roles (`:Person:Actor:Director`)
* Include four property types: unique identifiers, anchor properties, filter properties, return properties
* Choose properties that directly support use cases

**DON'T:**
* Use generic labels (`:Entity`, `:Thing`) or mix naming conventions
* Store computed values or use labels for frequently changing states

### Relationship Types and Properties  
**DO:**
* Use ALL_CAPS_UNDERSCORE naming (`:ACTED_IN`, `:WORKS_FOR`)
* Choose specific types over generic ones (avoid `:CONNECTED_TO`, `:RELATED_TO`)
* Use relationship properties only for connection attributes (role, date, rating)

**DON'T:**
* Include node labels in relationship names or use spaces/special characters
* Store node data in relationship properties

[Reference: Modeling Nodes](https://graphacademy.neo4j.com/courses/modeling-fundamentals/2-defining-nodes/1-defining-nodes) | [Reference: Modeling Relationships](https://graphacademy.neo4j.com/courses/modeling-fundamentals/3-defining-relationships/1-defining-relationships)

## Testing and Validation Strategy

### Test Data and Validation
1. **Start small** (10-50 nodes per type) with realistic distributions and edge cases
2. **Verify all use cases** can be answered with acceptable performance
3. **Profile queries** to identify expensive operations (CartesianProduct, AllNodesScan)
4. **Ensure proper index usage** and efficient relationship traversals

### Validation Checklist
- [ ] No full graph scans required
- [ ] Indexes properly utilized  
- [ ] Results match business logic
- [ ] Performance acceptable at expected scale

[Reference: Testing the Graph Data Model](https://graphacademy.neo4j.com/courses/modeling-fundamentals/4-testing-model)

## Refactoring Strategies

### When to Refactor
* New use cases not efficiently supported
* Performance degradation with data growth
* Discovery of supernodes or query bottlenecks
* Changed business requirements

### Common Refactoring Patterns

**Adding Specific Labels:** Extract subtypes (`:Actor`, `:Director`) from generic labels for better query performance

**Eliminating Duplicate Data:** Extract repeated property values into separate nodes with relationships

**Specific Relationship Types:** Replace generic relationships with purpose-specific types for direct traversal

**Intermediate Nodes:** Add nodes between entities when relationships need multiple properties or connections

[Reference: Refactoring Graph Data Models](https://graphacademy.neo4j.com/courses/modeling-fundamentals/5-refactoring-graph/1-refactoring-data-model)

## Common Pitfalls and Best Practices

### Avoid These Anti-Patterns
**Design Issues:**
* Modeling like relational databases (foreign key patterns)
* Over-normalizing or under-connecting entities
* Generic modeling with vague labels/relationships

**Performance Issues:**
* Creating supernodes (>100K relationships)
* Missing indexes on frequently queried properties
* Queries creating Cartesian products or requiring deep traversals

**Maintenance Problems:**
* Inconsistent naming conventions
* Undocumented modeling decisions
* Brittle queries tightly coupled to model structure

### Best Practices
1. **Start with use cases**, not data structure
2. **Document decisions** and track model versions
3. **Test changes** in development before production
4. **Monitor performance** continuously
5. **Plan migration strategies** for major refactoring

[Reference: Graph Data Modeling Best Practices](https://graphacademy.neo4j.com/courses/modeling-fundamentals) 