# Spatial types

## Introduction

Neo4j supports spatial data types for storing and querying geographic information.

The Go driver provides support for 2D and 3D point types that can be used to represent locations on Earth or in 3D space.

## Point types

Neo4j supports two types of points:

* **2D Points** - Represent locations on a 2D plane (e.g., latitude/longitude)
* **3D Points** - Represent locations in 3D space (e.g., latitude/longitude/altitude)

```go
import "github.com/neo4j/neo4j-go-driver/v5/neo4j"

// Create a 2D point (latitude, longitude)
point2D := neo4j.Point2D{
    X: -122.4194,  // longitude
    Y: 37.7749,    // latitude
    SpatialRefId: 4326, // WGS 84 coordinate system
}

// Create a 3D point (latitude, longitude, altitude)
point3D := neo4j.Point3D{
    X: -122.4194,  // longitude
    Y: 37.7749,    // latitude
    Z: 100.0,      // altitude in meters
    SpatialRefId: 4979, // WGS 84 3D coordinate system
}
```

## Working with spatial data

You can store and query spatial data in Neo4j:

```go
// Store a location
neo4j.ExecuteQuery(ctx, driver, `
CREATE (l:Location {
    name: $name,
    coordinates: $point
})
`, map[string]any{
    "name": "San Francisco",
    "point": point2D,
}, neo4j.EagerResultTransformer)

// Query locations within a distance
result, err := neo4j.ExecuteQuery(ctx, driver, `
MATCH (l:Location)
WHERE distance(l.coordinates, point({latitude: $lat, longitude: $lon})) < $radius
RETURN l.name AS name, l.coordinates AS coordinates
`, map[string]any{
    "lat": 37.7749,
    "lon": -122.4194,
    "radius": 10000, // 10km radius
}, neo4j.EagerResultTransformer)
```

## Summary

In this lesson, you learned about spatial types in Neo4j and how to work with them using the Go driver.

Spatial types allow you to store and query geographic information efficiently.
