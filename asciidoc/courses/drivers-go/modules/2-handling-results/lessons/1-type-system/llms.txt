# Graph types

## Introduction

Let's take a look at the types of data returned by a Cypher query.

The majority of the types returned by a Cypher query are mapped directly to Go types, but some more complex types need special handling.

* Graph types - Nodes, Relationships and Paths
* Temporal types - Dates and times
* Spatial types - Points and distances

**Types in Neo4j Browser**: When graph types are returned by a query, they are visualized in a graph layout.

## Direct mapping

| Go Type | Neo4j Cypher Type |
|---------|-------------------|
| `nil` | `null` |
| `bool` | `Boolean` |
| `int64` | `Integer` |
| `float64` | `Float` |
| `string` | `String` |
| `[]byte` | `Bytes [1]` |
| `[]any` | `List` |
| `map[string]any` | `Map` |

## Graph types

The following code snippet finds all movies with the specified title and returns `person`, `acted_in` and `movie`.

```go
result, err := neo4j.ExecuteQuery(ctx, driver, `
MATCH path = (person:Person)-[actedIn:ACTED_IN]->(movie:Movie {title: $title})
RETURN path, person, actedIn, movie
`, map[string]any{"title": movie}, neo4j.EagerResultTransformer)
```

## Nodes

Nodes are returned as a `neo4j.Node` object.

```go
for _, record := range result.Records {
    node, _ := record.Get("movie")
    movieNode := node.(neo4j.Node)
}
```

Working with Node Objects:

```go
fmt.Println(movieNode.ElementId)      // The ElementId property provides access to the node's element ID (eg. 4:97b72e9c-ae4d-427c-96ff-8858ecf16f88:0)
fmt.Println(movieNode.Labels)          // The Labels property is a slice containing an array of labels attributed to the Node (eg. ["Person", "Actor"])
fmt.Println(movieNode.Props)           // The Props property provides access to the node's properties as a map (eg. {name: "Tom Hanks", tmdbId: "31"})

// A single property can be retrieved using the Get() method which returns the value and a boolean indicating if the property exists.
name, exists := movieNode.Get("name")
if exists {
    fmt.Println(name)
}
```

## Relationships

Relationships are returned as a `neo4j.Relationship` object.

```go
actedIn, _ := record.Get("actedIn")
relationship := actedIn.(neo4j.Relationship)

fmt.Println(relationship.ElementId)         // ElementId - Internal ID of the relationship (eg. 9876)
fmt.Println(relationship.Type)              // Type - Type of relationship (eg. ACTED_IN)
fmt.Println(relationship.Props)             // Props - Returns relationship properties as a map (eg. {role: "Woody"})

// Access properties using the Get() method
role, exists := relationship.Get("role")
if exists {
    fmt.Println(role)
}

fmt.Println(relationship.StartNodeId)       // StartNodeId - Element ID of the node at the start of the relationship
fmt.Println(relationship.EndNodeId)          // EndNodeId - Element ID of the node at the end of the relationship
```

## Paths

A path is a sequence of nodes and relationships and is returned as a `neo4j.Path` object.

```go
path, _ := record.Get("path")
pathObj := path.(neo4j.Path)

fmt.Println(pathObj.Start)  // Start - neo4j.Node object at the start of the path
fmt.Println(pathObj.End)    // End - neo4j.Node object at the end of the path
fmt.Println(len(pathObj.Relationships))  // len(pathObj.Relationships) - The number of relationships within the path
fmt.Println(pathObj.Relationships)  // Relationships - A slice of neo4j.Relationship objects within the path.
```

**Paths are iterable**: Use `for _, rel := range pathObj.Relationships` to iterate over the relationships in a path.

## Summary

In this lesson, you learned about the types of data returned by a Cypher query and how to work with them in your application.

Now it's time to test yourself on what you've learned.
