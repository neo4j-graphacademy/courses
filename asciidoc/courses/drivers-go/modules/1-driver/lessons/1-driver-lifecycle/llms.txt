# Installing the driver

## Introduction

In the Cypher Fundamentals course, you learned how to query Neo4j using Cypher.

To run Cypher statements in a Go application, you'll need the Neo4j Go Driver.
The driver acts as a bridge between your Go code and Neo4j, handling connections to the database and the execution of Cypher queries.

## Installing the Driver

To install the driver, use go get:

```shell
go get github.com/neo4j/neo4j-go-driver/v5
```

## Creating a Driver Instance

You start by importing the driver and creating an instance:

```go
import (
    "context"
    "fmt"
    "github.com/neo4j/neo4j-go-driver/v5/neo4j"
)

func main() {
    driver, err := neo4j.NewDriverWithContext(
        "neo4j://localhost:7687", // The connection string for your Neo4j database
        neo4j.BasicAuth("neo4j", "your-password", ""), // Your Neo4j username and password
    )
    if err != nil {
        panic(err)
    }
    defer driver.Close(context.Background()) // Always close the driver when done
}
```

**Best Practice**: Create one Driver instance and share it across your entire application.

## Verifying Connectivity

You can verify the connection is correct by calling the `VerifyConnectivity()` method.

```go
ctx := context.Background()
err := driver.VerifyConnectivity(ctx)
if err != nil {
    panic(err)
}
```

The `VerifyConnectivity()` method will return an error if the connection cannot be made.

## Running Your First Query

The `ExecuteQuery()` method executes a Cypher query and returns the results.

```go
ctx := context.Background()
result, err := neo4j.ExecuteQuery(ctx, driver, // neo4j.ExecuteQuery() runs a Cypher query to get the count of all nodes in the database
    "RETURN COUNT {()} AS count",
    nil, // nil means no parameters are passed to the query
    neo4j.EagerResultTransformer, // EagerResultTransformer loads all results into memory
)
if err != nil {
    panic(err)
}

// Get the first record
first := result.Records[0] // Records contains a slice of the rows returned

// Print the count entry
count, _ := first.Get("count") // Values from the RETURN clause are accessed using the Get() method
fmt.Println(count)
```

## Full driver lifecycle

Once you have finished with the driver, call `Close()` to release any resources held by the driver.

```go
ctx := context.Background()
driver.Close(ctx)
```

You can use `defer` to create an all-in-one solution that will automatically close the driver when the function exits.

```go
func main() {
    driver, err := neo4j.NewDriverWithContext(NEO4J_URI, neo4j.BasicAuth(NEO4J_USERNAME, NEO4J_PASSWORD, ""))
    if err != nil {
        panic(err)
    }
    defer driver.Close(context.Background())
    
    result, err := neo4j.ExecuteQuery(context.Background(), driver, "RETURN COUNT {()} AS count", nil, neo4j.EagerResultTransformer)
    if err != nil {
        panic(err)
    }
}
```

## Lesson Summary

In this lesson you learned how to install the Neo4j Go Driver, create a Driver instance, verify connectivity to your database, and execute your first Cypher statement.

For async applications, use the async API methods.

In the next lesson, you will take a quiz to test your knowledge of installing and creating a driver instance.
