# Importing Data Fundamentals

Learn how to import data into Neo4j

[Learn more about this course](https://graphacademy.neo4j.com/courses/importing-fundamentals)

## Concepts

* **Data Import** - The process of moving data from one system into Neo4j, transforming it from different data models (relational, flat files, APIs) into a graph model
* **Neo4j Data Importer** - A "no-code" graphical tool that facilitates importing data from CSV files and relational databases into Neo4j without writing code
* **LOAD CSV** - A Cypher clause that provides built-in support for importing data from CSV files with full control over the import process
* **neo4j-admin import** - A command-line tool for high-performance bulk import of large datasets, requiring the database to be offline
* **ETL Tools** - Extract, Transform, Load tools (like Apache Hop) that handle complex data transformations from multiple sources
* **Unique Constraints** - Database constraints that ensure property values are unique for all nodes with a specific label, preventing duplicate data
* **Indexes** - Database structures that improve query performance by quickly finding nodes with specified properties
* **Node Labels** - Tags that categorize nodes in the graph (e.g., Person, Movie, Product)
* **Relationships** - Connections between nodes that represent how entities are related, with optional properties
* **Graph Data Model** - The schema-optional structure of nodes, relationships, and properties that represents your domain

## Planning and Method Selection

### Pre-Import Data Assessment
* **Data Formats Supported:** CSV, TSV, relational databases (PostgreSQL, MySQL, SQL Server, Oracle, Snowflake), JSON/XML, Excel
* **Data Quality Checks:** Missing values, data type consistency, duplicate records, special characters, unique identifiers
* **Volume Considerations:** Small (<1M), Medium (1M-10M), Large (>10M records)
* **Update Frequency:** One-time, regular batch, real-time, event-driven

### Choose Your Import Method

**Neo4j Data Importer (Recommended)**
* **Best for:** Beginners, no coding required, visual interface, small-medium datasets, CSV/TSV files
* **Limitations:** Limited data transformation capabilities

**LOAD CSV with Cypher**
* **Best for:** Data transformation needed, complex logic, small-medium datasets, full control
* **Requirements:** Cypher knowledge, manual coding

**neo4j-admin import**
* **Best for:** Very large datasets, initial bulk loads, maximum performance
* **Requirements:** Database offline, pre-formatted data, clean datasets

**ETL Tools & Custom Applications**
* **Best for:** Multiple sources, complex transformations, enterprise environments, real-time integration
* **Examples:** Apache Hop, Talend, custom scripts with Neo4j drivers

[Reference: Import Tools Overview](https://graphacademy.neo4j.com/courses/importing-fundamentals/1-importing-data/3-tools)

## Neo4j Data Importer Workflow

### Setup and Connection
1. **Access:** Navigate to https://workspace.neo4j.io/workspace/import
2. **Connect:** Enter connection URL, username, password
3. **Upload Files:** Use Files panel to upload CSV/TSV files
4. **Clear Previous Models:** Use "..." menu > "Clear all" if needed

### Create Nodes
1. **Add Node Label:** Click "Add Node", enter label name (Person, Movie, etc.)
2. **Select Data Source:** Choose corresponding CSV file
3. **Map Properties:** Use "Map from file" > "Select all" or choose specific columns
4. **Rename Properties:** Clean up names (remove prefixes, use consistent naming)
5. **Set Data Types:** Verify String, Integer, Float, Boolean, Date types
6. **Set Unique ID:** Click key icon next to ID property (creates constraint + index)

### Create Relationships
1. **Draw Relationship:** Hover over node edge, drag to target node
2. **Configure:** Set relationship type (ACTED_IN, DIRECTED, etc.)
3. **Map IDs:** Connect "From" and "To" nodes using ID properties and CSV columns
4. **Add Properties:** Map additional columns (role, date, quantity, etc.)

### Optimize and Execute
1. **Add Indexes:** Select node > "Constraints & Indexes" tab > "+" under Indexes
2. **Review Configuration:** Verify all mappings, constraints, and relationships
3. **Run Import:** Click "Run import" and monitor progress
4. **Verify Results:** Check import summary and test with sample queries

### Backup and Iteration
* **Save Work:** "..." menu > "Download model (with data)"
* **Restore:** "..." menu > "Open model (with data)"
* **Iterate:** Modify mappings and rerun as needed

[Reference: Data Importer Workflow](https://graphacademy.neo4j.com/courses/importing-fundamentals/2-data-importer/1-importing-nodes)

## Data Modeling Best Practices

### Design Principles
* **Model for use cases** - Don't let source data dictate graph structure
* **Use Arrows.app** for visual modeling and conceptual design
* **Plan entities and relationships** before importing
* **Choose appropriate data types** for each property
* **Establish unique identifiers** for all node types

### Schema Considerations
* **Neo4j is schema-optional** - Model evolves as you import
* **Constraints and indexes** improve performance and data integrity
* **Property guidelines:** Descriptive names, consistent types, future query patterns
* **Relationship properties** for additional context (roles, dates, quantities)

[Reference: Data Model Development](https://graphacademy.neo4j.com/courses/importing-fundamentals/3-source-data/2-data-model)

## Production Considerations

### Performance & Quality
* **Test with sample data** before full import
* **Use unique constraints** for merge operations
* **Create indexes** on frequently queried properties
* **Validate data quality** - encoding, duplicates, missing values
* **Monitor import progress** and handle errors appropriately

### Enterprise Deployment
* **Document procedures** and backup import models
* **Plan for incremental updates** and data validation
* **Consider ETL tools** for complex enterprise scenarios
* **Implement error handling** and rollback strategies

[Reference: Understanding Source Data](https://graphacademy.neo4j.com/courses/importing-fundamentals/3-source-data/1-understanding-source) 