---
description: 
globs: 
alwaysApply: true
---
Your task is to create a comprehensive, technical `llms.txt` file that summarizes the technical subjects taught in the course with a strong focus on code examples and practical implementation.

The `llms.txt` file will be used by an LLM during software development and should serve as a practical reference with working code samples.

There should be one `llms.txt` file per course, so make sure you read the entire course before creating the file. The file should include clear concept definitions and comprehensive code samples that demonstrate how features are implemented in real applications.

The file should be called `llms.txt` and placed in the course folder.

## File Structure Guidelines

### Course Header

The file should open with the course title and description from `course.adoc`, followed by a link to the full course:

```md
# [Course Title from course.adoc]

[Course caption/description from course.adoc]

[Learn more about this course](mdc:https:/graphacademy.neo4j.com/courses/[course-slug])
```

### Required Sections

#### 1. Concepts Section
Define all key technical terms and concepts covered in the course. Use clear, concise definitions that focus on technical aspects:

```md
## Concepts

* **Primary Concept** - Clear technical definition focusing on what it does and its role
* **Secondary Concept** - How it relates to the primary concept and its technical purpose
* **Implementation Detail** - Specific technical implementation or pattern used
```

#### 2. Technical Implementation Sections
Create one section for each major technical concept, organized progressively from basic to advanced. Each section must include:

- **Working code examples** that can be run immediately
- **Inline comments** explaining what each part does
- **Real-world context** showing practical usage
- **Reference links** to the specific course lessons

### Code Example Guidelines

#### Structure Each Code Section Like This:

```md
## [Technical Concept/Feature Name]

\```[language]
# Brief explanation of what this code does
[working code example with inline comments]

# [Comment explaining the next part]
[additional code building on the previous example]
\```

[Reference: Descriptive Link Text](mdc:https:/graphacademy.neo4j.com/courses/[course-slug]/[module]/[lesson])
```

#### Code Quality Requirements:

1. **Complete Examples**: All code should be runnable with proper imports
2. **Progressive Building**: Each example should build on previous ones
3. **Inline Comments**: Use comments to explain what code does, not numbered lists.  Use the appropriate comment format for that language.
4. **Real-World Patterns**: Show actual implementation patterns, not toy examples
5. **Error Handling**: Include error handling patterns where relevant
6. **Best Practices**: Demonstrate production-ready code patterns

#### Advanced Patterns to Include:

- **Installation/Setup**: Complete setup instructions with code
- **Basic Operations**: Core functionality with parameters and options
- **Data Transformation**: How to convert/process results
- **Error Handling**: Comprehensive exception handling patterns
- **Performance Optimization**: Patterns for production use
- **Integration Examples**: How concepts work together

## Content Extraction Process

### Step 1: Course Structure Analysis
1. Read `course.adoc` for overall course information
2. Examine each `modules/` directory in order
3. Read each `lessons/` subdirectory for lesson content
4. Look for `lesson.adoc` files containing the actual content

### Step 2: Code Pattern Identification
Look for these patterns in lesson content:

- **Installation commands** (pip install, npm install, etc.)
- **Import statements** and initial setup
- **Configuration examples** with parameters
- **API usage patterns** with method calls
- **Data processing examples** showing input/output
- **Error handling blocks** with try/catch patterns
- **Integration examples** showing multiple concepts together

### Step 3: Content Organization
Organize extracted content into logical sections:

1. **Installation & Setup** - Complete environment setup
2. **Basic Operations** - Core functionality with examples
3. **Data Handling** - Processing inputs/outputs, transformations
4. **Advanced Patterns** - Complex operations, error handling
5. **Integration Examples** - Multiple concepts working together
6. **Production Considerations** - Performance, security, best practices

## Reference Link Format

Always include reference links using this exact format:
```md
[Reference: {module title} > {lesson title}](mdc:https:/graphacademy.neo4j.com/courses/[course-slug]/[module-number-name]/[lesson-number-name])
```

Use descriptive titles that explain what the lesson covers, not just "Lesson 1" or similar.

## Example of Well-Structured Section

```md
## Database Connection Management

\```python
# Install required dependencies
# pip install neo4j

from neo4j import GraphDatabase

# Create driver instance (singleton pattern for application)
driver = GraphDatabase.driver(
    "neo4j://localhost:7687",       # Connection string
    auth=("neo4j", "your-password") # Authentication
)

# Verify connection before using
driver.verify_connectivity()

# Use context manager for automatic cleanup
with GraphDatabase.driver(NEO4J_URI, auth=(NEO4J_USERNAME, NEO4J_PASSWORD)) as driver:
    # Execute operations within this block
    records, summary, keys = driver.execute_query("RETURN 1 AS test")
\```

[Reference: Driver Installation and Setup](mdc:https:/graphacademy.neo4j.com/courses/drivers-python/1-driver/1-driver-lifecycle)
```

## Quality Checklist

Before finalizing the `llms.txt` file, ensure:

- [ ] All major technical concepts from the course are covered
- [ ] Every code example is complete and runnable
- [ ] Code examples progress from simple to complex
- [ ] Inline comments explain the technical details
- [ ] Each section has reference links to course lessons
- [ ] Installation/setup instructions are included
- [ ] Error handling patterns are demonstrated
- [ ] Production-ready patterns are shown
- [ ] The file serves as a practical development reference
- [ ] The comments added to code samples matches the language.  For example, Cypher uses `//` or `/* */`.

## Additional Instructions

* The file should be called `llms.txt` and placed in the course folder
* Output should be in markdown (md) format
* Focus on practical, implementable code over theoretical explanations
* Include installation commands, imports, and complete setup
* Show real-world usage patterns that developers will actually use

### Handling AsciiDoc Includes

When you encounter `include::` directives in lesson files:

* Extract the URL between `::` and `[` 
* If there's a `tag=` parameter, only read content between `tag::{name}[]` and `end::{name}[]`
* For `{repository-raw}` references, check `course.adoc` for the `:repository:` attribute
* Replace `{repository-raw}` with `https://raw.githubusercontent.com/{repository}/refs/heads/main/`

### Course-Specific Considerations

Different course types may emphasize different aspects:

- **Driver courses**: Focus on connection management, query execution, type handling
- **Application courses**: Focus on architecture patterns, API design, integration
- **Database courses**: Focus on query patterns, data modeling, performance
- **Framework courses**: Focus on configuration, components, workflow patterns

Adapt the section organization and code examples to match the course's primary focus while maintaining the technical, code-heavy approach.
