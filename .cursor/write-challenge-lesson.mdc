---
description: 
globs: 
alwaysApply: false
---
# Write a Challenge lesson

Write a practical challenge lesson that guides learners through implementing concepts they learned in previous theory lessons. The lesson should be hands-on, step-by-step, and focused on creating something functional. Use a encouraging but direct tone that assumes the learner has absorbed the theoretical concepts and is ready to apply them practically.

## Constraints

- Keep the lesson focused on one primary implementation goal
- Provide specific, actionable steps with exact commands and code
- Use simple, clear language with no motivational fluff
- Include practical testing and verification steps
- Ensure the challenge builds directly on previous lesson concepts
- Make the outcome immediately testable and verifiable
- Focus on getting something working rather than explaining theory
- Use consistent naming and examples throughout
- Form a checklist of instructions that users can follow step-by-step
- All content should be written in AsciiDoc format
- Use bullet point outlines from the lesson file to create hands-on challenges

## Required Structure

### 1. Challenge Introduction

- Start with a short, succinct recap of the previous lesson (read the directory alphabetically to find the previous lesson content)
- Follow with a single paragraph stating what the reader will do to complete the challenge
- Use format: "In this challenge, you will [action] using [method/tool]"
- Clear statement of the practical goal

### 2. Challenge Goals

- Numbered list (1-5 goals maximum) of specific, measurable outcomes
- Each goal should be actionable and verifiable
- Goals should build logically toward the final implementation

### 3. Step-by-Step Instructions

Break implementation into logical steps (typically 4-6 steps) forming a checklist of instructions:

#### Step Structure:
- **Step N: [Action-oriented title]** (use second-level headings like a to-do or checklist)
- Brief explanation of what this step accomplishes
- Exact commands to run (in code blocks)
- Code to write (in code blocks with filenames)
- Any important notes or explanations
- Instructions should be concise and describe what the user should do

#### Essential Steps to Include:
- Project setup and initialization
- Dependency installation
- Core implementation (the main code)
- Configuration and integration
- Testing and verification

### 4. Verification Section

- Clear checklist of what should be working
- Specific tests or examples to try
- Expected outcomes or behaviors
- Simple troubleshooting hints if needed

### 5. Next Steps Section

- Congratulatory statement acknowledging completion
- Brief summary of what was accomplished
- Connection to the bigger picture or learning objectives

### 6. Experimentation Tips

- Optional "[TIP] Experiment further" section
- 3-4 specific suggestions for extending the implementation
- Focus on variations or enhancements, not completely new concepts

### 7. Summary Section

- Use AsciiDoc format: `[.summary]` and `== Summary`
- Provide a one-paragraph summary of the actions that the user has carried out
- Can use bullet points with **bold key concepts** learned for more complex challenges
- Brief description of each major accomplishment
- Reference to the next lesson topic

Example formats:
```asciidoc
[.summary]
== Summary

You can now install the `neo4j` library and connect to Neo4j by creating a new driver instance.

In the next lesson, you will learn how to execute your first Cypher query.
```

Or for more complex challenges:
```asciidoc
[.summary]
== Summary

In this challenge, you demonstrated how to use the `neo4j` library to connect to Neo4j.
```

## Implementation Guidelines

### Using Bullet Point Outlines:
- If the lesson file contains bullet point outlines, use them to create hands-on challenges
- Convert each bullet point into a concrete, actionable step
- Maintain the logical flow and structure of the original outline
- Transform abstract concepts into specific implementation tasks

### Code and Commands:
- Always provide exact, copy-pasteable code
- Use consistent file names and project structure
- Include command-line instructions with proper syntax
- Specify which directory to run commands from

### Testing:
- Include real-world testing scenarios
- Use actual tools and environments (VS Code, browsers, etc.)
- Provide specific examples to test with
- Make verification steps concrete and measurable

### Tone:
- Encouraging but matter-of-fact
- Assume competence while providing clear guidance
- Celebrate success without excessive enthusiasm
- Focus on practical outcomes over learning theory

## Instruction

Write the final lesson content directly using AsciiDoc format. Do not include bullet points, notes, or meta-commentary. This is the learner-facing copy that guides them through the complete implementation challenge.
