---
description: 
globs: 
alwaysApply: false
---
Your task is to create a comprehensive, theory-focused `llms.txt` file that summarizes the methodologies, processes, and best practices taught in the course with a strong focus on actionable guidance and decision frameworks.

The `llms.txt` file will be used by developers and architects during planning and design phases and should serve as a strategic reference with clear processes, checklists, and decision trees.

There should be one `llms.txt` file per course, so make sure you read the entire course before creating the file. The file should include clear concept definitions and comprehensive guidance that demonstrates how to apply methodologies in real scenarios.

The file should be called `llms.txt` and placed in the course folder.

## File Structure Guidelines

### Course Header

The file should open with the course title and description from `course.adoc`, followed by a link to the full course:

```md
# [Course Title from course.adoc]

[Course caption/description from course.adoc]

[Learn more about this course](mdc:https:/graphacademy.neo4j.com/courses/[course-slug])
```

### Required Sections

#### 1. Concepts Section
Define all key theoretical terms and concepts covered in the course. Use clear, concise definitions that focus on strategic aspects:

```md
## Concepts

* **Primary Concept** - Clear definition focusing on what it is and its strategic purpose
* **Secondary Concept** - How it relates to the primary concept and its theoretical importance
* **Implementation Pattern** - Specific methodology or approach used in practice
```

#### 2. Process and Methodology Sections
Create sections for each major process or methodology, organized progressively from foundational to advanced. Each section must include:

- **Step-by-step processes** with numbered lists
- **Decision frameworks** with when-to-use guidance
- **DO and DON'T lists** with clear reasoning
- **Checklists** for validation and quality assurance
- **Reference links** to the specific course lessons

### Process Documentation Guidelines

#### Structure Each Process Section Like This:

```md
## [Process/Methodology Name]

### When to Use
* Specific scenarios where this approach applies
* Conditions that make this method optimal
* Warning signs that indicate you need this process

### Step-by-Step Process
1. **Step Name** - Clear action with expected outcome
2. **Step Name** - Building on previous step with decision points
3. **Step Name** - Final validation and next steps

### Best Practices
**DO:**
* Specific actionable guidance
* Proven approaches with clear benefits
* Quality indicators to watch for

**DON'T:**
* Common mistakes with explanations why to avoid
* Anti-patterns that seem logical but cause problems
* Pitfalls that lead to poor outcomes

### Validation Checklist
- [ ] Specific criteria for success
- [ ] Quality indicators to verify
- [ ] Common failure points to check

[Reference: Descriptive Link Text](mdc:https:/graphacademy.neo4j.com/courses/[course-slug]/[module]/[lesson])
```

#### Content Quality Requirements:

1. **Actionable Guidance**: All advice should be immediately applicable
2. **Decision Trees**: Clear criteria for choosing between approaches
3. **Measurable Outcomes**: Specific success criteria and quality indicators
4. **Process Flows**: Step-by-step methodologies with decision points
5. **Risk Mitigation**: Common pitfalls and how to avoid them
6. **Strategic Context**: When and why to apply each approach

#### Advanced Patterns to Include:

- **Planning Methodologies**: Complete planning frameworks with templates
- **Decision Frameworks**: Clear criteria for strategic choices
- **Quality Assurance**: Validation processes and success metrics
- **Risk Management**: Common failure modes and prevention strategies
- **Stakeholder Management**: Communication and collaboration approaches
- **Change Management**: How to evolve and adapt approaches over time

## Content Extraction Process

### Step 1: Course Structure Analysis
1. Read `course.adoc` for overall course methodology and objectives
2. Examine each `modules/` directory for key processes and frameworks  
3. Read each `lessons/` subdirectory for specific techniques and guidance
4. Look for `lesson.adoc` files containing theoretical content and best practices

### Step 2: Process Pattern Identification
Look for these patterns in lesson content:

- **Step-by-step methodologies** with clear sequences
- **Decision criteria** for choosing approaches
- **Best practice recommendations** with reasoning
- **Common mistakes** and how to avoid them
- **Quality indicators** and success metrics
- **Planning frameworks** and templates
- **Validation processes** and checklists

### Step 3: Content Organization
Organize extracted content into logical sections:

1. **Foundational Concepts** - Core theory and terminology
2. **Planning and Strategy** - High-level approaches and frameworks
3. **Implementation Processes** - Step-by-step methodologies
4. **Quality Assurance** - Validation, testing, and success criteria
5. **Common Pitfalls** - Anti-patterns and failure modes
6. **Advanced Strategies** - Complex scenarios and edge cases

## Reference Link Format

Always include reference links using this exact format:
```md
[Reference: {module title} > {lesson title}](mdc:https:/graphacademy.neo4j.com/courses/[course-slug]/[module-number-name]/[lesson-number-name])
```

Use descriptive titles that explain what the lesson covers, focusing on the methodology or concept rather than generic names.

## Example of Well-Structured Section

```md
## Requirements Gathering Methodology

### When to Use
* Beginning new projects with unclear scope
* Stakeholders have conflicting priorities
* Previous attempts failed due to poor requirements

### Step-by-Step Process
1. **Stakeholder Identification** - Map all parties affected by the system
2. **Use Case Development** - Convert business needs into specific scenarios
3. **Priority Assessment** - Rank requirements by business value and technical complexity
4. **Validation Workshop** - Review requirements with stakeholders for accuracy

### Best Practices
**DO:**
* Start with business outcomes, not technical features
* Document assumptions and constraints explicitly
* Involve end users in requirement validation
* Plan for requirement evolution and change

**DON'T:**
* Skip stakeholder analysis to save time
* Assume technical teams understand business context
* Lock requirements too early in the process
* Ignore non-functional requirements

### Validation Checklist
- [ ] All stakeholder groups represented
- [ ] Requirements traceable to business outcomes
- [ ] Success criteria clearly defined
- [ ] Assumptions and constraints documented

[Reference: Requirements Analysis Framework](mdc:https:/graphacademy.neo4j.com/courses/example-course/1-planning/2-requirements)
```

## Quality Checklist

Before finalizing the `llms.txt` file, ensure:

- [ ] All major methodologies from the course are covered
- [ ] Every process has clear step-by-step instructions
- [ ] DO and DON'T guidance is specific and actionable
- [ ] Each section has validation checklists
- [ ] Reference links connect to relevant course lessons
- [ ] Decision frameworks help choose between approaches
- [ ] Common pitfalls and anti-patterns are identified
- [ ] Success criteria and quality indicators are defined
- [ ] The file serves as a practical planning reference

## Additional Instructions

* The file should be called `llms.txt` and placed in the course folder
* Output should be in markdown (md) format
* Focus on strategic guidance and decision-making frameworks
* Include planning templates, checklists, and process flows
* Show real-world application scenarios and trade-offs

### Course-Specific Considerations

Different theory course types may emphasize different aspects:

- **Methodology courses**: Focus on process flows, decision trees, planning frameworks
- **Best practices courses**: Focus on DO/DON'T guidance, quality criteria, validation checklists
- **Strategy courses**: Focus on decision frameworks, trade-off analysis, situational guidance
- **Design courses**: Focus on design principles, evaluation criteria, iterative processes

Adapt the section organization and guidance format to match the course's primary focus while maintaining the theory-heavy, process-oriented approach.

### Handling Different Content Types

When you encounter various lesson types:

* **Process lessons**: Extract step-by-step methodologies and decision points
* **Best practice lessons**: Convert into DO/DON'T lists with clear reasoning
* **Case study lessons**: Extract principles and patterns that apply broadly
* **Theory lessons**: Focus on practical application of theoretical concepts
* **Strategy lessons**: Create decision frameworks and situational guidance

### Common Theory Course Patterns

Look for these patterns in theory-based courses:

- **Frameworks and Models**: Structured approaches to complex problems
- **Decision Criteria**: How to choose between different options
- **Process Flows**: Sequential steps with decision points and feedback loops
- **Quality Standards**: How to evaluate success and identify problems
- **Stakeholder Management**: Communication and collaboration strategies
- **Risk Assessment**: Common failure modes and mitigation strategies
