import { ASCIIDOC_CACHING_ENABLED, HTML_DIRECTORY } from "../../../constants";
import { checkAddToCache, convertLessonOverview, generateCourseOverviewCacheKey, generateCourseSummaryCacheKey, generateLessonCacheKey, generateModuleCacheKey } from "..";
import { read } from "../../neo4j";
import { getPageAttributes } from "../../../utils";
import { Course, STATUS_ACTIVE } from "../../../domain/model/course";
import { existsSync, readFileSync } from "fs";
import { join } from "path";

export async function buildFromAsciidoc(course: Course, module: string, lesson: string): Promise<string> {
    // Generate Attributes for the page
    const attributes = await getPageAttributes(undefined, course)

    // Get Cache Key
    const key = generateLessonCacheKey(course.slug, module, lesson)

    // Generate HTMl
    await convertLessonOverview(course.slug, module, lesson, attributes)

    return key
}

/**
 * HTML files built by the courses repo have the same filename as
 * the cache key generated by the helper functions.
 *
 * @param key
 * @returns {void}
 */
function loadAndCache(key): Promise<void> {
    const fullPath = join(HTML_DIRECTORY, key)

    if (existsSync(fullPath)) {
        const html = readFileSync(fullPath).toString()

        checkAddToCache(key, html)
    }

    return Promise.resolve()
}

export async function cacheCourseFromHtml(course: Course): Promise<number> {
    let count = 2
    await loadAndCache(generateCourseOverviewCacheKey(course.slug))
    await loadAndCache(generateCourseSummaryCacheKey(course.slug))

    for (const module of course.modules) {
        await loadAndCache(generateModuleCacheKey(course.slug, module.slug))

        count++

        for (const lesson of module.lessons) {
            await loadAndCache(generateLessonCacheKey(course.slug, module.slug, lesson.slug))

            count++
        }
    }

    return count
}

export async function getCourseStructure() {
    const res = await read<{ course: Course }>(`
        MATCH (c:Course)
        WHERE c.status = $active
        RETURN c {.*,
            modules: [ (c)-[:HAS_MODULE]->(m) | m {
                .*,
                lessons: [ (m)-[:HAS_LESSON]->(l) | l { .* } ]
            }]
        } AS course
    `, { active: STATUS_ACTIVE })

    return res.records.map(row => row.toObject())
}

export async function cacheHTML(): Promise<void> {
    if (!ASCIIDOC_CACHING_ENABLED) {
        console.log('[caching] disabled');

        return
    }

    console.log('[caching] enabled');

    const courses = await getCourseStructure()

    let cached = 0

    for (const row of courses) {
        cached += await cacheCourseFromHtml(row.course)
    }

    console.log(`ðŸ§  Cached ${cached} files from ${courses.length} courses`)
}
